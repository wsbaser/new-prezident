{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","new-prezident/tests/app.lint-test.js","new-prezident/tests/helpers/destroy-app.js","new-prezident/tests/helpers/module-for-acceptance.js","new-prezident/tests/helpers/resolver.js","new-prezident/tests/helpers/start-app.js","new-prezident/tests/integration/components/video-collection-test.js","new-prezident/tests/integration/helpers/minutes-string-test.js","new-prezident/tests/test-helper.js","new-prezident/tests/tests.lint-test.js","new-prezident/tests/unit/initializers/component-router-injector-test.js","new-prezident/tests/unit/models/channel-test.js","new-prezident/tests/unit/models/playlist-test.js","new-prezident/tests/unit/models/video-range-test.js","new-prezident/tests/unit/models/video-test.js","new-prezident/tests/unit/routes/index-test.js","new-prezident/tests/unit/services/video-history-test.js","new-prezident/tests/unit/services/video-navigator-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('new-prezident/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('components/video-collection.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'components/video-collection.js should pass ESLint\\n\\n24:25 - \\'$\\' is not defined. (no-undef)\\n71:13 - Unexpected console statement. (no-console)\\n95:20 - \\'Promise\\' is not defined. (no-undef)\\n95:46 - \\'reject\\' is defined but never used. (no-unused-vars)\\n140:9 - Unexpected console statement. (no-console)\\n149:20 - \\'Promise\\' is not defined. (no-undef)\\n149:46 - \\'reject\\' is defined but never used. (no-unused-vars)\\n150:42 - \\'e\\' is defined but never used. (no-unused-vars)\\n154:30 - \\'YT\\' is not defined. (no-undef)\\n174:19 - \\'event\\' is defined but never used. (no-unused-vars)\\n185:27 - \\'YT\\' is not defined. (no-undef)\\n193:21 - Unexpected console statement. (no-console)\\n207:30 - \\'YT\\' is not defined. (no-undef)\\n207:66 - \\'YT\\' is not defined. (no-undef)\\n208:28 - \\'YT\\' is not defined. (no-undef)\\n209:17 - Unexpected console statement. (no-console)\\n211:28 - \\'YT\\' is not defined. (no-undef)\\n212:17 - Unexpected console statement. (no-console)\\n218:17 - \\'from\\' is assigned a value but never used. (no-unused-vars)\\n247:13 - Unexpected console statement. (no-console)');\n  });\n\n  QUnit.test('helpers/minutes-string.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'helpers/minutes-string.js should pass ESLint\\n\\n3:44 - \\'rest\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('initializers/component-router-injector.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'initializers/component-router-injector.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/channel.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'models/channel.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('models/playlist.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/playlist.js should pass ESLint\\n\\n2:10 - \\'belongsTo\\' is defined but never used. (no-unused-vars)\\n10:16 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('models/video-range.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/video-range.js should pass ESLint\\n\\n3:21 - \\'hasMany\\' is defined but never used. (no-unused-vars)\\n12:11 - \\'Ember\\' is not defined. (no-undef)\\n17:16 - \\'Ember\\' is not defined. (no-undef)');\n  });\n\n  QUnit.test('models/video.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'models/video.js should pass ESLint\\n\\n3:21 - \\'hasMany\\' is defined but never used. (no-unused-vars)');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(false, 'routes/index.js should pass ESLint\\n\\n4:8 - \\'params\\' is defined but never used. (no-unused-vars)\\n5:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n6:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)\\n7:2 - Mixed spaces and tabs. (no-mixed-spaces-and-tabs)');\n  });\n\n  QUnit.test('serializers/application.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'serializers/application.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/video-history.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/video-history.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('services/video-navigator.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'services/video-navigator.js should pass ESLint\\n\\n');\n  });\n});","define('new-prezident/tests/helpers/destroy-app', ['exports'], function (exports) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  var run = Ember.run;\n  function destroyApp(application) {\n    run(application, 'destroy');\n  }\n});","define('new-prezident/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'new-prezident/tests/helpers/start-app', 'new-prezident/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var resolve = Ember.RSVP.resolve;\n});","define('new-prezident/tests/helpers/resolver', ['exports', 'new-prezident/resolver', 'new-prezident/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('new-prezident/tests/helpers/start-app', ['exports', 'new-prezident/app', 'new-prezident/config/environment'], function (exports, _app, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  var merge = Ember.merge;\n  var run = Ember.run;\n  function startApp(attrs) {\n    var attributes = merge({}, _environment.default.APP);\n    attributes = merge(attributes, attrs); // use defaults, but you can override;\n\n    return run(function () {\n      var application = _app.default.create(attributes);\n      application.setupForTesting();\n      application.injectTestHelpers();\n      return application;\n    });\n  }\n});","define('new-prezident/tests/integration/components/video-collection-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('video-collection', 'Integration | Component | video collection', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    // Set any properties with this.set('myProperty', 'value');\n    // Handle any actions with this.on('myAction', function(val) { ... });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BpOYoIUR\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[18,\\\"video-collection\\\"],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    // Template block usage:\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"VVb/StDH\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[0,\\\"\\\\n\\\"],[4,\\\"video-collection\\\",null,null,{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"parameters\\\":[]},null],[0,\\\"  \\\"]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), 'template block text');\n  });\n});","define('new-prezident/tests/integration/helpers/minutes-string-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForComponent)('minutes-string', 'helper:minutes-string', {\n    integration: true\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('inputValue', '1234');\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Pclb98WY\",\n      \"block\": \"{\\\"symbols\\\":[],\\\"statements\\\":[[1,[25,\\\"minutes-string\\\",[[20,[\\\"inputValue\\\"]]],null],false]],\\\"hasEval\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '1234');\n  });\n});","define('new-prezident/tests/test-helper', ['new-prezident/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('new-prezident/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/video-collection-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/video-collection-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/helpers/minutes-string-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/helpers/minutes-string-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/initializers/component-router-injector-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/initializers/component-router-injector-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/channel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/channel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/playlist-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/playlist-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/video-range-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/video-range-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/video-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/video-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/video-history-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/video-history-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/video-navigator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/video-navigator-test.js should pass ESLint\\n\\n');\n  });\n});","define('new-prezident/tests/unit/initializers/component-router-injector-test', ['new-prezident/initializers/component-router-injector', 'qunit', 'new-prezident/tests/helpers/destroy-app'], function (_componentRouterInjector, _qunit, _destroyApp) {\n  'use strict';\n\n  var Application = Ember.Application;\n  var run = Ember.run;\n\n\n  (0, _qunit.module)('Unit | Initializer | component router injector', {\n    beforeEach: function beforeEach() {\n      var _this = this;\n\n      run(function () {\n        _this.application = Application.create();\n        _this.application.deferReadiness();\n      });\n    },\n    afterEach: function afterEach() {\n      (0, _destroyApp.default)(this.application);\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it works', function (assert) {\n    (0, _componentRouterInjector.initialize)(this.application);\n\n    // you would normally confirm the results of the initializer here\n    assert.ok(true);\n  });\n});","define('new-prezident/tests/unit/models/channel-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('channel', 'Unit | Model | channel', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('new-prezident/tests/unit/models/playlist-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('playlist', 'Unit | Model | playlist', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('new-prezident/tests/unit/models/video-range-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('video-range', 'Unit | Model | video range', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('new-prezident/tests/unit/models/video-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('video', 'Unit | Model | video', {\n    // Specify the other units that are required for this test.\n    needs: []\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var model = this.subject();\n    // let store = this.store();\n    assert.ok(!!model);\n  });\n});","define('new-prezident/tests/unit/routes/index-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('route:index', 'Unit | Route | index', {\n    // Specify the other units that are required for this test.\n    // needs: ['controller:foo']\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('new-prezident/tests/unit/services/video-history-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:video-history', 'Unit | Service | video history', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","define('new-prezident/tests/unit/services/video-navigator-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleFor)('service:video-navigator', 'Unit | Service | video navigator', {\n    // Specify the other units that are required for this test.\n    // needs: ['service:foo']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = this.subject();\n    assert.ok(service);\n  });\n});","require('new-prezident/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappings":"AAAA;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClBA;AACA;AACA;AACA;AACA;;ACJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACZA;AACA;","file":"tests.js"}